import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Obfuscator {

	public static void main(String[] args) throws NoSuchAlgorithmException, IOException {
		String obfuscatedFileName = createNewFile("addition.c");
		String obfuscatedFileName1 = createNewFile("addition.c");
		String obfuscatedFileName2 = createNewFile("addition.c");
		String obfuscatedFileName3 = createNewFile("addition.c");
		
		removeSingleLineComments("addition.c" , obfuscatedFileName);
		removeMultiLineComments(obfuscatedFileName , obfuscatedFileName1);
		
		if(Files.deleteIfExists(Paths.get(obfuscatedFileName))) {
			System.out.println("File deleted");
		}else System.out.println("File not found");
		
		removeWhiteSpaces(obfuscatedFileName1, obfuscatedFileName2);
		
		if(Files.deleteIfExists(Paths.get(obfuscatedFileName1))) {
			System.out.println("File deleted");
		}else System.out.println("File not found");
		
		obfuscateFile(obfuscatedFileName2, obfuscatedFileName3);
		
		if(Files.deleteIfExists(Paths.get(obfuscatedFileName2))) {
			System.out.println("File deleted");
		}else System.out.println("File not found");
	}
	
	 // 1. Remove single line comments
	static void removeSingleLineComments(String filename, String obfuscatedFileName) throws IOException {
		BufferedReader reader;
		FileWriter fileWriter = new FileWriter(obfuscatedFileName, true);
	    BufferedWriter writer = new BufferedWriter(fileWriter);
		try {
			reader = new BufferedReader(new FileReader(filename));
			String line = reader.readLine();
			while (line != null) {
				if(line.contains("//")) {
					int index = line.indexOf("//");
					line = line.substring(0, index) ;
				} 
				
				writer.write(line);
				writer.newLine();
				// read next line
				line = reader.readLine();
			}
			reader.close();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 2. Remove multi-line comments
	static void removeMultiLineComments(String filename, String obfuscatedFileName) throws NoSuchAlgorithmException, IOException {
		BufferedReader reader;
		
		FileWriter fileWriter = new FileWriter(obfuscatedFileName, true);
	    BufferedWriter writer = new BufferedWriter(fileWriter);

		try {
			reader = new BufferedReader(new FileReader(filename));
			String line = reader.readLine();
			while (line != null) {
				
				if(line.contains("/*") && line.contains("*/")) {
					int index = line.indexOf("/*");
					String newLine = line.substring(0, index) ;
					writer.write(newLine);
					writer.newLine();
					line = reader.readLine();
				}
				
				if(line.contains("/*")) {
					line = reader.readLine();
					while(!line.contains("*/")) {
						line = reader.readLine();
					}
					line = reader.readLine();
				}
				
				writer.write(line);
				writer.newLine();
				line = reader.readLine();
			}
			reader.close();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	// 3. Remove white spaces and new lines \n
	static void removeWhiteSpaces(String filename, String obfuscatedFileName) throws IOException {
		BufferedReader reader;
		
		FileWriter fileWriter = new FileWriter(obfuscatedFileName, true);
	    BufferedWriter writer = new BufferedWriter(fileWriter);

		try {
			reader = new BufferedReader(new FileReader(filename));
			String line = reader.readLine();
			while (line != null) {
				if(line.contains("#")) {
					writer.write(line);
					writer.newLine();
					line = reader.readLine();
				} else {
					String newLine = line.replaceAll("  ", "");
					writer.write(newLine);
					line = reader.readLine();
				}
				
			}
			reader.close();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	static String createNewFile(String initialFileName) throws IOException, NoSuchAlgorithmException {;
		int index = initialFileName.indexOf(".");
		String obfustactedFileName = initialFileName.substring(0, index) + generateTrulyRandomNo() + ".c";
		
		 FileWriter myWriter = new FileWriter(obfustactedFileName);
		 myWriter.close();
		 return obfustactedFileName;
	}
	
	static int generateTrulyRandomNo() throws NoSuchAlgorithmException {
		return SecureRandom.getInstanceStrong().nextInt();
	}
	
	static void obfuscateFile(String filename, String obfuscatedFileName) throws IOException {
		BufferedReader reader;
		
		FileWriter fileWriter = new FileWriter(obfuscatedFileName, true);
	    BufferedWriter writer = new BufferedWriter(fileWriter);
	    StringBuilder content = new StringBuilder();
	    StringBuilder append = new StringBuilder();
		try {
			reader = new BufferedReader(new FileReader(filename));
			String line = reader.readLine();
			while (line != null) {
				if(line.contains("#")) {
					line = reader.readLine();
				}
				String words[] = line.split(" ");
				String newWords[] = words;
				
				for(int i = 0; i < words.length; i++) {
					switch(words[i]) {
					case "int":
						newWords[i] = "goto";
						append.append(" #define int goto\n");
						break;
					case "=":
						newWords[i] = "/";
						append.append("#define = /\n");
						break;
					case "getchar()":
						newWords[i] = "________";
						append .append(" #define getchar() ________\n");
						break;
					default: break;
					}
				}
				
				String newLine = String.join(" ", newWords);
				content.append(newLine);
				line = reader.readLine();
			}
			writer.append(content);
			writer.append(append, 0, append.length());
			reader.close();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
